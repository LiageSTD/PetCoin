/*
 * This file is generated by jOOQ.
 */
package org.coinpet.petcoin.repository.jooq.model.public_.tables.records;


import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.coinpet.petcoin.repository.jooq.model.public_.tables.MarketData;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MarketDataRecord extends UpdatableRecordImpl<MarketDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.market_data.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.market_data.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.market_data.crypto_id</code>.
     */
    public void setCryptoId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.market_data.crypto_id</code>.
     */
    public Integer getCryptoId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.market_data.timestamp</code>.
     */
    public void setTimestamp(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.market_data.timestamp</code>.
     */
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.market_data.price</code>.
     */
    public void setPrice(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.market_data.price</code>.
     */
    public BigDecimal getPrice() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>public.market_data.supply</code>.
     */
    public void setSupply(BigDecimal value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.market_data.supply</code>.
     */
    public BigDecimal getSupply() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.market_data.max_supply</code>.
     */
    public void setMaxSupply(BigDecimal value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.market_data.max_supply</code>.
     */
    public BigDecimal getMaxSupply() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>public.market_data.volume_usd</code>.
     */
    public void setVolumeUsd(BigDecimal value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.market_data.volume_usd</code>.
     */
    public BigDecimal getVolumeUsd() {
        return (BigDecimal) get(6);
    }

    /**
     * Setter for <code>public.market_data.market_cap</code>.
     */
    public void setMarketCap(BigDecimal value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.market_data.market_cap</code>.
     */
    public BigDecimal getMarketCap() {
        return (BigDecimal) get(7);
    }

    /**
     * Setter for <code>public.market_data.additional_data</code>.
     */
    public void setAdditionalData(JSONB value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.market_data.additional_data</code>.
     */
    public JSONB getAdditionalData() {
        return (JSONB) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MarketDataRecord
     */
    public MarketDataRecord() {
        super(MarketData.MARKET_DATA);
    }

    /**
     * Create a detached, initialised MarketDataRecord
     */
    public MarketDataRecord(Integer id, Integer cryptoId, LocalDateTime timestamp, BigDecimal price, BigDecimal supply, BigDecimal maxSupply, BigDecimal volumeUsd, BigDecimal marketCap, JSONB additionalData) {
        super(MarketData.MARKET_DATA);

        setId(id);
        setCryptoId(cryptoId);
        setTimestamp(timestamp);
        setPrice(price);
        setSupply(supply);
        setMaxSupply(maxSupply);
        setVolumeUsd(volumeUsd);
        setMarketCap(marketCap);
        setAdditionalData(additionalData);
        resetChangedOnNotNull();
    }
}
