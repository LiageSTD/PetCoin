/*
 * This file is generated by jOOQ.
 */
package org.coinpet.petcoin.repository.jooq.model.public_.tables.records;


import java.time.LocalDateTime;

import org.coinpet.petcoin.repository.jooq.model.public_.tables.CryptoExchange;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CryptoExchangeRecord extends UpdatableRecordImpl<CryptoExchangeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.crypto_exchange.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.crypto_exchange.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.crypto_exchange.crypto_id</code>.
     */
    public void setCryptoId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.crypto_exchange.crypto_id</code>.
     */
    public Integer getCryptoId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.crypto_exchange.exchange_id</code>.
     */
    public void setExchangeId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.crypto_exchange.exchange_id</code>.
     */
    public Integer getExchangeId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.crypto_exchange.trading_pair</code>.
     */
    public void setTradingPair(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.crypto_exchange.trading_pair</code>.
     */
    public String getTradingPair() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.crypto_exchange.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.crypto_exchange.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CryptoExchangeRecord
     */
    public CryptoExchangeRecord() {
        super(CryptoExchange.CRYPTO_EXCHANGE);
    }

    /**
     * Create a detached, initialised CryptoExchangeRecord
     */
    public CryptoExchangeRecord(Integer id, Integer cryptoId, Integer exchangeId, String tradingPair, LocalDateTime createdAt) {
        super(CryptoExchange.CRYPTO_EXCHANGE);

        setId(id);
        setCryptoId(cryptoId);
        setExchangeId(exchangeId);
        setTradingPair(tradingPair);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }
}
