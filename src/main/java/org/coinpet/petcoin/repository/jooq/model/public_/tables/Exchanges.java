/*
 * This file is generated by jOOQ.
 */
package org.coinpet.petcoin.repository.jooq.model.public_.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.coinpet.petcoin.repository.jooq.model.public_.Keys;
import org.coinpet.petcoin.repository.jooq.model.public_.Public;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.CryptoExchange.CryptoExchangePath;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.records.ExchangesRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Exchanges extends TableImpl<ExchangesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.exchanges</code>
     */
    public static final Exchanges EXCHANGES = new Exchanges();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExchangesRecord> getRecordType() {
        return ExchangesRecord.class;
    }

    /**
     * The column <code>public.exchanges.id</code>.
     */
    public final TableField<ExchangesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.exchanges.name</code>.
     */
    public final TableField<ExchangesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.exchanges.website</code>.
     */
    public final TableField<ExchangesRecord, String> WEBSITE = createField(DSL.name("website"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.exchanges.country</code>.
     */
    public final TableField<ExchangesRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.exchanges.created_at</code>.
     */
    public final TableField<ExchangesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Exchanges(Name alias, Table<ExchangesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Exchanges(Name alias, Table<ExchangesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.exchanges</code> table reference
     */
    public Exchanges(String alias) {
        this(DSL.name(alias), EXCHANGES);
    }

    /**
     * Create an aliased <code>public.exchanges</code> table reference
     */
    public Exchanges(Name alias) {
        this(alias, EXCHANGES);
    }

    /**
     * Create a <code>public.exchanges</code> table reference
     */
    public Exchanges() {
        this(DSL.name("exchanges"), null);
    }

    public <O extends Record> Exchanges(Table<O> path, ForeignKey<O, ExchangesRecord> childPath, InverseForeignKey<O, ExchangesRecord> parentPath) {
        super(path, childPath, parentPath, EXCHANGES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ExchangesPath extends Exchanges implements Path<ExchangesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ExchangesPath(Table<O> path, ForeignKey<O, ExchangesRecord> childPath, InverseForeignKey<O, ExchangesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ExchangesPath(Name alias, Table<ExchangesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ExchangesPath as(String alias) {
            return new ExchangesPath(DSL.name(alias), this);
        }

        @Override
        public ExchangesPath as(Name alias) {
            return new ExchangesPath(alias, this);
        }

        @Override
        public ExchangesPath as(Table<?> alias) {
            return new ExchangesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ExchangesRecord, Integer> getIdentity() {
        return (Identity<ExchangesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExchangesRecord> getPrimaryKey() {
        return Keys.EXCHANGES_PKEY;
    }

    @Override
    public List<UniqueKey<ExchangesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.EXCHANGES_NAME_KEY);
    }

    private transient CryptoExchangePath _cryptoExchange;

    /**
     * Get the implicit to-many join path to the
     * <code>public.crypto_exchange</code> table
     */
    public CryptoExchangePath cryptoExchange() {
        if (_cryptoExchange == null)
            _cryptoExchange = new CryptoExchangePath(this, null, Keys.CRYPTO_EXCHANGE__CRYPTO_EXCHANGE_EXCHANGE_ID_FKEY.getInverseKey());

        return _cryptoExchange;
    }

    @Override
    public Exchanges as(String alias) {
        return new Exchanges(DSL.name(alias), this);
    }

    @Override
    public Exchanges as(Name alias) {
        return new Exchanges(alias, this);
    }

    @Override
    public Exchanges as(Table<?> alias) {
        return new Exchanges(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Exchanges rename(String name) {
        return new Exchanges(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exchanges rename(Name name) {
        return new Exchanges(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exchanges rename(Table<?> name) {
        return new Exchanges(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exchanges where(Condition condition) {
        return new Exchanges(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exchanges where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exchanges where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exchanges where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exchanges where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exchanges where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exchanges where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exchanges where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exchanges whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exchanges whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
