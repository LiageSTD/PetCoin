/*
 * This file is generated by jOOQ.
 */
package org.coinpet.petcoin.repository.jooq.model.public_.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.coinpet.petcoin.repository.jooq.model.public_.Keys;
import org.coinpet.petcoin.repository.jooq.model.public_.Public;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.Cryptocurrencies.CryptocurrenciesPath;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.Users.UsersPath;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.records.NotificationLogsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationLogs extends TableImpl<NotificationLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.notification_logs</code>
     */
    public static final NotificationLogs NOTIFICATION_LOGS = new NotificationLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationLogsRecord> getRecordType() {
        return NotificationLogsRecord.class;
    }

    /**
     * The column <code>public.notification_logs.id</code>.
     */
    public final TableField<NotificationLogsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.notification_logs.user_id</code>.
     */
    public final TableField<NotificationLogsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.notification_logs.crypto_id</code>.
     */
    public final TableField<NotificationLogsRecord, Integer> CRYPTO_ID = createField(DSL.name("crypto_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.notification_logs.notification_time</code>.
     */
    public final TableField<NotificationLogsRecord, LocalDateTime> NOTIFICATION_TIME = createField(DSL.name("notification_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.notification_logs.message</code>.
     */
    public final TableField<NotificationLogsRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.notification_logs.status</code>.
     */
    public final TableField<NotificationLogsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20), this, "");

    private NotificationLogs(Name alias, Table<NotificationLogsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationLogs(Name alias, Table<NotificationLogsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.notification_logs</code> table reference
     */
    public NotificationLogs(String alias) {
        this(DSL.name(alias), NOTIFICATION_LOGS);
    }

    /**
     * Create an aliased <code>public.notification_logs</code> table reference
     */
    public NotificationLogs(Name alias) {
        this(alias, NOTIFICATION_LOGS);
    }

    /**
     * Create a <code>public.notification_logs</code> table reference
     */
    public NotificationLogs() {
        this(DSL.name("notification_logs"), null);
    }

    public <O extends Record> NotificationLogs(Table<O> path, ForeignKey<O, NotificationLogsRecord> childPath, InverseForeignKey<O, NotificationLogsRecord> parentPath) {
        super(path, childPath, parentPath, NOTIFICATION_LOGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NotificationLogsPath extends NotificationLogs implements Path<NotificationLogsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NotificationLogsPath(Table<O> path, ForeignKey<O, NotificationLogsRecord> childPath, InverseForeignKey<O, NotificationLogsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotificationLogsPath(Name alias, Table<NotificationLogsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotificationLogsPath as(String alias) {
            return new NotificationLogsPath(DSL.name(alias), this);
        }

        @Override
        public NotificationLogsPath as(Name alias) {
            return new NotificationLogsPath(alias, this);
        }

        @Override
        public NotificationLogsPath as(Table<?> alias) {
            return new NotificationLogsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<NotificationLogsRecord, Integer> getIdentity() {
        return (Identity<NotificationLogsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationLogsRecord> getPrimaryKey() {
        return Keys.NOTIFICATION_LOGS_PKEY;
    }

    @Override
    public List<ForeignKey<NotificationLogsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTIFICATION_LOGS__NOTIFICATION_LOGS_CRYPTO_ID_FKEY, Keys.NOTIFICATION_LOGS__NOTIFICATION_LOGS_USER_ID_FKEY);
    }

    private transient CryptocurrenciesPath _cryptocurrencies;

    /**
     * Get the implicit join path to the <code>public.cryptocurrencies</code>
     * table.
     */
    public CryptocurrenciesPath cryptocurrencies() {
        if (_cryptocurrencies == null)
            _cryptocurrencies = new CryptocurrenciesPath(this, Keys.NOTIFICATION_LOGS__NOTIFICATION_LOGS_CRYPTO_ID_FKEY, null);

        return _cryptocurrencies;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.NOTIFICATION_LOGS__NOTIFICATION_LOGS_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public NotificationLogs as(String alias) {
        return new NotificationLogs(DSL.name(alias), this);
    }

    @Override
    public NotificationLogs as(Name alias) {
        return new NotificationLogs(alias, this);
    }

    @Override
    public NotificationLogs as(Table<?> alias) {
        return new NotificationLogs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationLogs rename(String name) {
        return new NotificationLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationLogs rename(Name name) {
        return new NotificationLogs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationLogs rename(Table<?> name) {
        return new NotificationLogs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationLogs where(Condition condition) {
        return new NotificationLogs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationLogs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationLogs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationLogs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationLogs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationLogs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationLogs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationLogs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationLogs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationLogs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
