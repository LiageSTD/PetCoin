/*
 * This file is generated by jOOQ.
 */
package org.coinpet.petcoin.repository.jooq.model.public_.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.coinpet.petcoin.repository.jooq.model.public_.Keys;
import org.coinpet.petcoin.repository.jooq.model.public_.Public;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.CryptoExchange.CryptoExchangePath;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.MarketData.MarketDataPath;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.NotificationLogs.NotificationLogsPath;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.Subscriptions.SubscriptionsPath;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.Users.UsersPath;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.records.CryptocurrenciesRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Cryptocurrencies extends TableImpl<CryptocurrenciesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cryptocurrencies</code>
     */
    public static final Cryptocurrencies CRYPTOCURRENCIES = new Cryptocurrencies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CryptocurrenciesRecord> getRecordType() {
        return CryptocurrenciesRecord.class;
    }

    /**
     * The column <code>public.cryptocurrencies.id</code>.
     */
    public final TableField<CryptocurrenciesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.cryptocurrencies.symbol</code>.
     */
    public final TableField<CryptocurrenciesRecord, String> SYMBOL = createField(DSL.name("symbol"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.cryptocurrencies.name</code>.
     */
    public final TableField<CryptocurrenciesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.cryptocurrencies.description</code>.
     */
    public final TableField<CryptocurrenciesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.cryptocurrencies.rank</code>.
     */
    public final TableField<CryptocurrenciesRecord, Integer> RANK = createField(DSL.name("rank"), SQLDataType.INTEGER, this, "");

    private Cryptocurrencies(Name alias, Table<CryptocurrenciesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cryptocurrencies(Name alias, Table<CryptocurrenciesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.cryptocurrencies</code> table reference
     */
    public Cryptocurrencies(String alias) {
        this(DSL.name(alias), CRYPTOCURRENCIES);
    }

    /**
     * Create an aliased <code>public.cryptocurrencies</code> table reference
     */
    public Cryptocurrencies(Name alias) {
        this(alias, CRYPTOCURRENCIES);
    }

    /**
     * Create a <code>public.cryptocurrencies</code> table reference
     */
    public Cryptocurrencies() {
        this(DSL.name("cryptocurrencies"), null);
    }

    public <O extends Record> Cryptocurrencies(Table<O> path, ForeignKey<O, CryptocurrenciesRecord> childPath, InverseForeignKey<O, CryptocurrenciesRecord> parentPath) {
        super(path, childPath, parentPath, CRYPTOCURRENCIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CryptocurrenciesPath extends Cryptocurrencies implements Path<CryptocurrenciesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CryptocurrenciesPath(Table<O> path, ForeignKey<O, CryptocurrenciesRecord> childPath, InverseForeignKey<O, CryptocurrenciesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CryptocurrenciesPath(Name alias, Table<CryptocurrenciesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CryptocurrenciesPath as(String alias) {
            return new CryptocurrenciesPath(DSL.name(alias), this);
        }

        @Override
        public CryptocurrenciesPath as(Name alias) {
            return new CryptocurrenciesPath(alias, this);
        }

        @Override
        public CryptocurrenciesPath as(Table<?> alias) {
            return new CryptocurrenciesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CryptocurrenciesRecord, Integer> getIdentity() {
        return (Identity<CryptocurrenciesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CryptocurrenciesRecord> getPrimaryKey() {
        return Keys.CRYPTOCURRENCIES_PKEY;
    }

    @Override
    public List<UniqueKey<CryptocurrenciesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CRYPTOCURRENCIES_SYMBOL_KEY);
    }

    private transient CryptoExchangePath _cryptoExchange;

    /**
     * Get the implicit to-many join path to the
     * <code>public.crypto_exchange</code> table
     */
    public CryptoExchangePath cryptoExchange() {
        if (_cryptoExchange == null)
            _cryptoExchange = new CryptoExchangePath(this, null, Keys.CRYPTO_EXCHANGE__CRYPTO_EXCHANGE_CRYPTO_ID_FKEY.getInverseKey());

        return _cryptoExchange;
    }

    private transient MarketDataPath _marketData;

    /**
     * Get the implicit to-many join path to the <code>public.market_data</code>
     * table
     */
    public MarketDataPath marketData() {
        if (_marketData == null)
            _marketData = new MarketDataPath(this, null, Keys.MARKET_DATA__MARKET_DATA_CRYPTO_ID_FKEY.getInverseKey());

        return _marketData;
    }

    private transient NotificationLogsPath _notificationLogs;

    /**
     * Get the implicit to-many join path to the
     * <code>public.notification_logs</code> table
     */
    public NotificationLogsPath notificationLogs() {
        if (_notificationLogs == null)
            _notificationLogs = new NotificationLogsPath(this, null, Keys.NOTIFICATION_LOGS__NOTIFICATION_LOGS_CRYPTO_ID_FKEY.getInverseKey());

        return _notificationLogs;
    }

    private transient SubscriptionsPath _subscriptions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.subscriptions</code> table
     */
    public SubscriptionsPath subscriptions() {
        if (_subscriptions == null)
            _subscriptions = new SubscriptionsPath(this, null, Keys.SUBSCRIPTIONS__SUBSCRIPTIONS_CRYPTO_ID_FKEY.getInverseKey());

        return _subscriptions;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.users</code>
     * table
     */
    public UsersPath users() {
        return subscriptions().users();
    }

    @Override
    public Cryptocurrencies as(String alias) {
        return new Cryptocurrencies(DSL.name(alias), this);
    }

    @Override
    public Cryptocurrencies as(Name alias) {
        return new Cryptocurrencies(alias, this);
    }

    @Override
    public Cryptocurrencies as(Table<?> alias) {
        return new Cryptocurrencies(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cryptocurrencies rename(String name) {
        return new Cryptocurrencies(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cryptocurrencies rename(Name name) {
        return new Cryptocurrencies(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cryptocurrencies rename(Table<?> name) {
        return new Cryptocurrencies(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cryptocurrencies where(Condition condition) {
        return new Cryptocurrencies(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cryptocurrencies where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cryptocurrencies where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cryptocurrencies where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cryptocurrencies where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cryptocurrencies where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cryptocurrencies where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cryptocurrencies where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cryptocurrencies whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cryptocurrencies whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
