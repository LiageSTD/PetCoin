/*
 * This file is generated by jOOQ.
 */
package org.coinpet.petcoin.repository.jooq.model.public_.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.coinpet.petcoin.repository.jooq.model.public_.Keys;
import org.coinpet.petcoin.repository.jooq.model.public_.Public;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.Cryptocurrencies.CryptocurrenciesPath;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.Exchanges.ExchangesPath;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.records.CryptoExchangeRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CryptoExchange extends TableImpl<CryptoExchangeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.crypto_exchange</code>
     */
    public static final CryptoExchange CRYPTO_EXCHANGE = new CryptoExchange();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CryptoExchangeRecord> getRecordType() {
        return CryptoExchangeRecord.class;
    }

    /**
     * The column <code>public.crypto_exchange.id</code>.
     */
    public final TableField<CryptoExchangeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.crypto_exchange.crypto_id</code>.
     */
    public final TableField<CryptoExchangeRecord, Integer> CRYPTO_ID = createField(DSL.name("crypto_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.crypto_exchange.exchange_id</code>.
     */
    public final TableField<CryptoExchangeRecord, Integer> EXCHANGE_ID = createField(DSL.name("exchange_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.crypto_exchange.trading_pair</code>.
     */
    public final TableField<CryptoExchangeRecord, String> TRADING_PAIR = createField(DSL.name("trading_pair"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.crypto_exchange.created_at</code>.
     */
    public final TableField<CryptoExchangeRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private CryptoExchange(Name alias, Table<CryptoExchangeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CryptoExchange(Name alias, Table<CryptoExchangeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.crypto_exchange</code> table reference
     */
    public CryptoExchange(String alias) {
        this(DSL.name(alias), CRYPTO_EXCHANGE);
    }

    /**
     * Create an aliased <code>public.crypto_exchange</code> table reference
     */
    public CryptoExchange(Name alias) {
        this(alias, CRYPTO_EXCHANGE);
    }

    /**
     * Create a <code>public.crypto_exchange</code> table reference
     */
    public CryptoExchange() {
        this(DSL.name("crypto_exchange"), null);
    }

    public <O extends Record> CryptoExchange(Table<O> path, ForeignKey<O, CryptoExchangeRecord> childPath, InverseForeignKey<O, CryptoExchangeRecord> parentPath) {
        super(path, childPath, parentPath, CRYPTO_EXCHANGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CryptoExchangePath extends CryptoExchange implements Path<CryptoExchangeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CryptoExchangePath(Table<O> path, ForeignKey<O, CryptoExchangeRecord> childPath, InverseForeignKey<O, CryptoExchangeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CryptoExchangePath(Name alias, Table<CryptoExchangeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CryptoExchangePath as(String alias) {
            return new CryptoExchangePath(DSL.name(alias), this);
        }

        @Override
        public CryptoExchangePath as(Name alias) {
            return new CryptoExchangePath(alias, this);
        }

        @Override
        public CryptoExchangePath as(Table<?> alias) {
            return new CryptoExchangePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CryptoExchangeRecord, Integer> getIdentity() {
        return (Identity<CryptoExchangeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CryptoExchangeRecord> getPrimaryKey() {
        return Keys.CRYPTO_EXCHANGE_PKEY;
    }

    @Override
    public List<UniqueKey<CryptoExchangeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQ_CRYPTO_EXCHANGE_PAIR);
    }

    @Override
    public List<ForeignKey<CryptoExchangeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CRYPTO_EXCHANGE__CRYPTO_EXCHANGE_CRYPTO_ID_FKEY, Keys.CRYPTO_EXCHANGE__CRYPTO_EXCHANGE_EXCHANGE_ID_FKEY);
    }

    private transient CryptocurrenciesPath _cryptocurrencies;

    /**
     * Get the implicit join path to the <code>public.cryptocurrencies</code>
     * table.
     */
    public CryptocurrenciesPath cryptocurrencies() {
        if (_cryptocurrencies == null)
            _cryptocurrencies = new CryptocurrenciesPath(this, Keys.CRYPTO_EXCHANGE__CRYPTO_EXCHANGE_CRYPTO_ID_FKEY, null);

        return _cryptocurrencies;
    }

    private transient ExchangesPath _exchanges;

    /**
     * Get the implicit join path to the <code>public.exchanges</code> table.
     */
    public ExchangesPath exchanges() {
        if (_exchanges == null)
            _exchanges = new ExchangesPath(this, Keys.CRYPTO_EXCHANGE__CRYPTO_EXCHANGE_EXCHANGE_ID_FKEY, null);

        return _exchanges;
    }

    @Override
    public CryptoExchange as(String alias) {
        return new CryptoExchange(DSL.name(alias), this);
    }

    @Override
    public CryptoExchange as(Name alias) {
        return new CryptoExchange(alias, this);
    }

    @Override
    public CryptoExchange as(Table<?> alias) {
        return new CryptoExchange(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CryptoExchange rename(String name) {
        return new CryptoExchange(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CryptoExchange rename(Name name) {
        return new CryptoExchange(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CryptoExchange rename(Table<?> name) {
        return new CryptoExchange(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CryptoExchange where(Condition condition) {
        return new CryptoExchange(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CryptoExchange where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CryptoExchange where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CryptoExchange where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CryptoExchange where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CryptoExchange where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CryptoExchange where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CryptoExchange where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CryptoExchange whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CryptoExchange whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
