/*
 * This file is generated by jOOQ.
 */
package org.coinpet.petcoin.repository.jooq.model.public_.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.coinpet.petcoin.repository.jooq.model.public_.Keys;
import org.coinpet.petcoin.repository.jooq.model.public_.Public;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.Cryptocurrencies.CryptocurrenciesPath;
import org.coinpet.petcoin.repository.jooq.model.public_.tables.records.MarketDataRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MarketData extends TableImpl<MarketDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.market_data</code>
     */
    public static final MarketData MARKET_DATA = new MarketData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarketDataRecord> getRecordType() {
        return MarketDataRecord.class;
    }

    /**
     * The column <code>public.market_data.id</code>.
     */
    public final TableField<MarketDataRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.market_data.crypto_id</code>.
     */
    public final TableField<MarketDataRecord, Integer> CRYPTO_ID = createField(DSL.name("crypto_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.market_data.timestamp</code>.
     */
    public final TableField<MarketDataRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.market_data.price</code>.
     */
    public final TableField<MarketDataRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(20, 8).nullable(false), this, "");

    /**
     * The column <code>public.market_data.supply</code>.
     */
    public final TableField<MarketDataRecord, BigDecimal> SUPPLY = createField(DSL.name("supply"), SQLDataType.NUMERIC(30, 8), this, "");

    /**
     * The column <code>public.market_data.max_supply</code>.
     */
    public final TableField<MarketDataRecord, BigDecimal> MAX_SUPPLY = createField(DSL.name("max_supply"), SQLDataType.NUMERIC(30, 8), this, "");

    /**
     * The column <code>public.market_data.volume_usd</code>.
     */
    public final TableField<MarketDataRecord, BigDecimal> VOLUME_USD = createField(DSL.name("volume_usd"), SQLDataType.NUMERIC(30, 8), this, "");

    /**
     * The column <code>public.market_data.market_cap</code>.
     */
    public final TableField<MarketDataRecord, BigDecimal> MARKET_CAP = createField(DSL.name("market_cap"), SQLDataType.NUMERIC(30, 8), this, "");

    /**
     * The column <code>public.market_data.additional_data</code>.
     */
    public final TableField<MarketDataRecord, JSONB> ADDITIONAL_DATA = createField(DSL.name("additional_data"), SQLDataType.JSONB, this, "");

    private MarketData(Name alias, Table<MarketDataRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MarketData(Name alias, Table<MarketDataRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.market_data</code> table reference
     */
    public MarketData(String alias) {
        this(DSL.name(alias), MARKET_DATA);
    }

    /**
     * Create an aliased <code>public.market_data</code> table reference
     */
    public MarketData(Name alias) {
        this(alias, MARKET_DATA);
    }

    /**
     * Create a <code>public.market_data</code> table reference
     */
    public MarketData() {
        this(DSL.name("market_data"), null);
    }

    public <O extends Record> MarketData(Table<O> path, ForeignKey<O, MarketDataRecord> childPath, InverseForeignKey<O, MarketDataRecord> parentPath) {
        super(path, childPath, parentPath, MARKET_DATA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MarketDataPath extends MarketData implements Path<MarketDataRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MarketDataPath(Table<O> path, ForeignKey<O, MarketDataRecord> childPath, InverseForeignKey<O, MarketDataRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MarketDataPath(Name alias, Table<MarketDataRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MarketDataPath as(String alias) {
            return new MarketDataPath(DSL.name(alias), this);
        }

        @Override
        public MarketDataPath as(Name alias) {
            return new MarketDataPath(alias, this);
        }

        @Override
        public MarketDataPath as(Table<?> alias) {
            return new MarketDataPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MarketDataRecord, Integer> getIdentity() {
        return (Identity<MarketDataRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MarketDataRecord> getPrimaryKey() {
        return Keys.MARKET_DATA_PKEY;
    }

    @Override
    public List<UniqueKey<MarketDataRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQ_CRYPTO_TIMESTAMP);
    }

    @Override
    public List<ForeignKey<MarketDataRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MARKET_DATA__MARKET_DATA_CRYPTO_ID_FKEY);
    }

    private transient CryptocurrenciesPath _cryptocurrencies;

    /**
     * Get the implicit join path to the <code>public.cryptocurrencies</code>
     * table.
     */
    public CryptocurrenciesPath cryptocurrencies() {
        if (_cryptocurrencies == null)
            _cryptocurrencies = new CryptocurrenciesPath(this, Keys.MARKET_DATA__MARKET_DATA_CRYPTO_ID_FKEY, null);

        return _cryptocurrencies;
    }

    @Override
    public MarketData as(String alias) {
        return new MarketData(DSL.name(alias), this);
    }

    @Override
    public MarketData as(Name alias) {
        return new MarketData(alias, this);
    }

    @Override
    public MarketData as(Table<?> alias) {
        return new MarketData(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MarketData rename(String name) {
        return new MarketData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarketData rename(Name name) {
        return new MarketData(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarketData rename(Table<?> name) {
        return new MarketData(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MarketData where(Condition condition) {
        return new MarketData(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MarketData where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MarketData where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MarketData where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MarketData where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MarketData where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MarketData where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MarketData where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MarketData whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MarketData whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
