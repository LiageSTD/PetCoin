/*
 * This file is generated by jOOQ.
 */
package org.coinpet.petcoin.crypto.repository.jooq.model.public_;


import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.CryptoExchange;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.Cryptocurrencies;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.Exchanges;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.FlywaySchemaHistory;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.MarketData;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.NotificationLogs;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.Subscriptions;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.Users;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.records.CryptoExchangeRecord;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.records.CryptocurrenciesRecord;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.records.ExchangesRecord;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.records.FlywaySchemaHistoryRecord;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.records.MarketDataRecord;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.records.NotificationLogsRecord;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.records.SubscriptionsRecord;
import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.records.UsersRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CryptoExchangeRecord> CRYPTO_EXCHANGE_PKEY = Internal.createUniqueKey(CryptoExchange.CRYPTO_EXCHANGE, DSL.name("crypto_exchange_pkey"), new TableField[] { CryptoExchange.CRYPTO_EXCHANGE.ID }, true);
    public static final UniqueKey<CryptoExchangeRecord> UNIQ_CRYPTO_EXCHANGE_PAIR = Internal.createUniqueKey(CryptoExchange.CRYPTO_EXCHANGE, DSL.name("uniq_crypto_exchange_pair"), new TableField[] { CryptoExchange.CRYPTO_EXCHANGE.CRYPTO_ID, CryptoExchange.CRYPTO_EXCHANGE.EXCHANGE_ID, CryptoExchange.CRYPTO_EXCHANGE.TRADING_PAIR }, true);
    public static final UniqueKey<CryptocurrenciesRecord> CRYPTOCURRENCIES_NAME_KEY = Internal.createUniqueKey(Cryptocurrencies.CRYPTOCURRENCIES, DSL.name("cryptocurrencies_name_key"), new TableField[] { Cryptocurrencies.CRYPTOCURRENCIES.NAME }, true);
    public static final UniqueKey<CryptocurrenciesRecord> CRYPTOCURRENCIES_PKEY = Internal.createUniqueKey(Cryptocurrencies.CRYPTOCURRENCIES, DSL.name("cryptocurrencies_pkey"), new TableField[] { Cryptocurrencies.CRYPTOCURRENCIES.ID }, true);
    public static final UniqueKey<CryptocurrenciesRecord> CRYPTOCURRENCIES_SYMBOL_KEY = Internal.createUniqueKey(Cryptocurrencies.CRYPTOCURRENCIES, DSL.name("cryptocurrencies_symbol_key"), new TableField[] { Cryptocurrencies.CRYPTOCURRENCIES.SYMBOL }, true);
    public static final UniqueKey<ExchangesRecord> EXCHANGES_NAME_KEY = Internal.createUniqueKey(Exchanges.EXCHANGES, DSL.name("exchanges_name_key"), new TableField[] { Exchanges.EXCHANGES.NAME }, true);
    public static final UniqueKey<ExchangesRecord> EXCHANGES_PKEY = Internal.createUniqueKey(Exchanges.EXCHANGES, DSL.name("exchanges_pkey"), new TableField[] { Exchanges.EXCHANGES.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<MarketDataRecord> MARKET_DATA_PKEY = Internal.createUniqueKey(MarketData.MARKET_DATA, DSL.name("market_data_pkey"), new TableField[] { MarketData.MARKET_DATA.ID }, true);
    public static final UniqueKey<MarketDataRecord> UNIQ_CRYPTO_TIMESTAMP = Internal.createUniqueKey(MarketData.MARKET_DATA, DSL.name("uniq_crypto_timestamp"), new TableField[] { MarketData.MARKET_DATA.CRYPTO_ID, MarketData.MARKET_DATA.TIMESTAMP }, true);
    public static final UniqueKey<NotificationLogsRecord> NOTIFICATION_LOGS_PKEY = Internal.createUniqueKey(NotificationLogs.NOTIFICATION_LOGS, DSL.name("notification_logs_pkey"), new TableField[] { NotificationLogs.NOTIFICATION_LOGS.ID }, true);
    public static final UniqueKey<SubscriptionsRecord> SUBSCRIPTIONS_PKEY = Internal.createUniqueKey(Subscriptions.SUBSCRIPTIONS, DSL.name("subscriptions_pkey"), new TableField[] { Subscriptions.SUBSCRIPTIONS.ID }, true);
    public static final UniqueKey<SubscriptionsRecord> UNIQ_USER_CRYPTO = Internal.createUniqueKey(Subscriptions.SUBSCRIPTIONS, DSL.name("uniq_user_crypto"), new TableField[] { Subscriptions.SUBSCRIPTIONS.USER_ID, Subscriptions.SUBSCRIPTIONS.CRYPTO_ID }, true);
    public static final UniqueKey<UsersRecord> USERS_EMAIL_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_email_key"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_USERNAME_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_username_key"), new TableField[] { Users.USERS.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CryptoExchangeRecord, CryptocurrenciesRecord> CRYPTO_EXCHANGE__CRYPTO_EXCHANGE_CRYPTO_ID_FKEY = Internal.createForeignKey(CryptoExchange.CRYPTO_EXCHANGE, DSL.name("crypto_exchange_crypto_id_fkey"), new TableField[] { CryptoExchange.CRYPTO_EXCHANGE.CRYPTO_ID }, Keys.CRYPTOCURRENCIES_PKEY, new TableField[] { Cryptocurrencies.CRYPTOCURRENCIES.ID }, true);
    public static final ForeignKey<CryptoExchangeRecord, ExchangesRecord> CRYPTO_EXCHANGE__CRYPTO_EXCHANGE_EXCHANGE_ID_FKEY = Internal.createForeignKey(CryptoExchange.CRYPTO_EXCHANGE, DSL.name("crypto_exchange_exchange_id_fkey"), new TableField[] { CryptoExchange.CRYPTO_EXCHANGE.EXCHANGE_ID }, Keys.EXCHANGES_PKEY, new TableField[] { Exchanges.EXCHANGES.ID }, true);
    public static final ForeignKey<MarketDataRecord, CryptocurrenciesRecord> MARKET_DATA__MARKET_DATA_CRYPTO_ID_FKEY = Internal.createForeignKey(MarketData.MARKET_DATA, DSL.name("market_data_crypto_id_fkey"), new TableField[] { MarketData.MARKET_DATA.CRYPTO_ID }, Keys.CRYPTOCURRENCIES_PKEY, new TableField[] { Cryptocurrencies.CRYPTOCURRENCIES.ID }, true);
    public static final ForeignKey<NotificationLogsRecord, CryptocurrenciesRecord> NOTIFICATION_LOGS__NOTIFICATION_LOGS_CRYPTO_ID_FKEY = Internal.createForeignKey(NotificationLogs.NOTIFICATION_LOGS, DSL.name("notification_logs_crypto_id_fkey"), new TableField[] { NotificationLogs.NOTIFICATION_LOGS.CRYPTO_ID }, Keys.CRYPTOCURRENCIES_PKEY, new TableField[] { Cryptocurrencies.CRYPTOCURRENCIES.ID }, true);
    public static final ForeignKey<NotificationLogsRecord, UsersRecord> NOTIFICATION_LOGS__NOTIFICATION_LOGS_USER_ID_FKEY = Internal.createForeignKey(NotificationLogs.NOTIFICATION_LOGS, DSL.name("notification_logs_user_id_fkey"), new TableField[] { NotificationLogs.NOTIFICATION_LOGS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<SubscriptionsRecord, CryptocurrenciesRecord> SUBSCRIPTIONS__SUBSCRIPTIONS_CRYPTO_ID_FKEY = Internal.createForeignKey(Subscriptions.SUBSCRIPTIONS, DSL.name("subscriptions_crypto_id_fkey"), new TableField[] { Subscriptions.SUBSCRIPTIONS.CRYPTO_ID }, Keys.CRYPTOCURRENCIES_PKEY, new TableField[] { Cryptocurrencies.CRYPTOCURRENCIES.ID }, true);
    public static final ForeignKey<SubscriptionsRecord, UsersRecord> SUBSCRIPTIONS__SUBSCRIPTIONS_USER_ID_FKEY = Internal.createForeignKey(Subscriptions.SUBSCRIPTIONS, DSL.name("subscriptions_user_id_fkey"), new TableField[] { Subscriptions.SUBSCRIPTIONS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
}
