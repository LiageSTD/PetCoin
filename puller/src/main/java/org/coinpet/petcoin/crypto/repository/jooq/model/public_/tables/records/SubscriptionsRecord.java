/*
 * This file is generated by jOOQ.
 */
package org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.records;


import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.coinpet.petcoin.crypto.repository.jooq.model.public_.tables.Subscriptions;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SubscriptionsRecord extends UpdatableRecordImpl<SubscriptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.subscriptions.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.subscriptions.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.subscriptions.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.subscriptions.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.subscriptions.crypto_id</code>.
     */
    public void setCryptoId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.subscriptions.crypto_id</code>.
     */
    public Integer getCryptoId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.subscriptions.threshold</code>.
     */
    public void setThreshold(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.subscriptions.threshold</code>.
     */
    public BigDecimal getThreshold() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>public.subscriptions.notification_type</code>.
     */
    public void setNotificationType(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.subscriptions.notification_type</code>.
     */
    public String getNotificationType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.subscriptions.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.subscriptions.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.subscriptions.price_at_subscription</code>.
     */
    public void setPriceAtSubscription(BigDecimal value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.subscriptions.price_at_subscription</code>.
     */
    public BigDecimal getPriceAtSubscription() {
        return (BigDecimal) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SubscriptionsRecord
     */
    public SubscriptionsRecord() {
        super(Subscriptions.SUBSCRIPTIONS);
    }

    /**
     * Create a detached, initialised SubscriptionsRecord
     */
    public SubscriptionsRecord(Integer id, Integer userId, Integer cryptoId, BigDecimal threshold, String notificationType, LocalDateTime createdAt, BigDecimal priceAtSubscription) {
        super(Subscriptions.SUBSCRIPTIONS);

        setId(id);
        setUserId(userId);
        setCryptoId(cryptoId);
        setThreshold(threshold);
        setNotificationType(notificationType);
        setCreatedAt(createdAt);
        setPriceAtSubscription(priceAtSubscription);
        resetChangedOnNotNull();
    }
}
